import { apiRequest, useApiRequest } from "@gikdev/react-datapi/src"
import type { CustomerDto, SmsMsgDto } from "@repo/api-client/client"
import { notifManager } from "@repo/shared/adapters"
import { Btn, ErrorCardBoundary, Labeler, Switch, TextArea } from "@repo/shared/components"
import { createFieldsWithLabels } from "@repo/shared/helpers"
import { HeadingLine } from "@repo/shared/layouts"
import type { GetRowIdFunc, SelectionChangedEvent } from "ag-grid-community"
import { type ComponentProps, type FormEvent, memo, useCallback, useRef, useState } from "react"
import * as z from "zod"
import genDatApiConfig from "#/shared/datapi-config"
import { TableMultiSelect } from "./table-mutliselect"

const columnDefs: ComponentProps<typeof TableMultiSelect>["columnDefs"] = [
  { field: "displayName" as never, headerName: "نام" },
  { field: "groupName" as never, headerName: "گروه گرمی" },
  { field: "groupIntName" as never, headerName: "گروه عددی" },
  { field: "mobile" as never, headerName: "موبایل" },
  { field: "codeMelli" as never, headerName: "کد ملی" },
  { field: "isActive" as never, headerName: "فعال هست؟" },
  { field: "isBlocked" as never, headerName: "مسدود کردن معامله" },
  { field: "allowedDevices" as never, headerName: "تعداد دستگاه های مجاز" },
]

const MemoTableMultiSelect = memo(TableMultiSelect)

const { fields, labels } = createFieldsWithLabels({
  message: "پیغام",
  receivers: "گیرنده‌ها",
  toAll: "ارسال به همه",
})

const SendSmsFormSchema = z
  .object({
    [fields.message]: z.string().min(1, { message: `وارد کردن «${labels.message}» الزامی‌است` }),
    [fields.receivers]: z.number().array().nullable(),
    [fields.toAll]: z.boolean(),
  })
  .refine(data => data.toAll === true || (data.receivers?.length ?? 0) > 0, {
    message: `باید حداقل یک گیرنده انتخاب شود یا گزینه ${labels.toAll} فعال باشد.`,
    path: [fields.toAll],
  })

const getRowId: GetRowIdFunc<unknown> = params => (params.data as { id: number }).id.toString()

export default function SendSms() {
  const [userIds, setUserIds] = useStateLikeRef<number[]>([])
  const [isSubmitting, setSubmitting] = useState(false)
  const [isToAll, setToAll] = useStateLikeRef(false)
  const [msg, setMsg] = useStateLikeRef("")
  const customersRes = useApiRequest<CustomerDto[]>(() => ({
    url: "/Master/GetCustomers",
    defaultValue: [],
    onFinally: () => console.log("did this!"),
  }))

  const onSelectionChanged = useCallback(
    (event: SelectionChangedEvent) => {
      const selectedItemsIds: number[] | undefined = event.selectedNodes?.map(
        i => (i.data as { id: number }).id,
      )

      setUserIds(selectedItemsIds ?? [])
    },
    [setUserIds],
  )

  async function onSubmit(e: FormEvent) {
    e.preventDefault()
    setSubmitting(true)

    const dataToSend: Required<SmsMsgDto> = {
      toAll: isToAll(),
      receivers: isToAll() ? null : userIds().length > 0 ? userIds() : null,
      message: msg(),
    }

    const result = SendSmsFormSchema.safeParse(dataToSend)

    if (!result.success) {
      const msg = JSON.parse(result.error.message)?.[0].message
      notifManager.notify(msg, "toast", { status: "error" })
      setSubmitting(false)
      return
    }

    await apiRequest({
      config: genDatApiConfig(),
      options: {
        method: "POST",
        url: "/Master/sms/broadcast",
        body: JSON.stringify(dataToSend),
        onSuccess: () => {
          notifManager.notify("با موفقیت انجام شد", "toast", { status: "success" })
          setUserIds([])
          setToAll(false)
          setMsg("")
        },
        onFinally() {
          setSubmitting(false)
        },
      },
    })
  }

  return (
    <HeadingLine title="ارسال پیامک" className="flex flex-col gap-8">
      <ErrorCardBoundary>
        <form
          className="flex flex-col gap-5 max-w-240 w-full xl:max-w-auto mx-auto xl:mx-0 p-5 bg-slate-2 rounded-md border border-slate-6"
          onSubmit={onSubmit}
          noValidate
        >
          <label className="flex gap-2 items-center select-none cursor-pointer hover:bg-slate-3 p-1 rounded-md">
            <Switch onChange={e => setToAll(e.target.checked)} />
            <span className="font-bold text-slate-12">{labels.toAll}</span>
          </label>

          <Labeler labelText={labels.receivers} className="h-100 relative" as="div">
            <MemoTableMultiSelect
              onSelectionChanged={onSelectionChanged}
              rowData={customersRes.data}
              columnDefs={columnDefs}
              getRowId={getRowId}
            />
          </Labeler>

          <Labeler labelText={labels.message}>
            <TextArea
              className="h-40"
              onChange={(e: { target: { value: string } }) => setMsg(e.target.value)}
            />
          </Labeler>

          <Btn
            className="flex gap-2 items-center font-bold"
            disabled={isSubmitting}
            themeType="filled"
            theme="primary"
            type="submit"
          >
            ارسال
          </Btn>
        </form>
      </ErrorCardBoundary>
    </HeadingLine>
  )
}

function useStateLikeRef<T>(defaultVaule: T) {
  const thingRef = useRef<T>(defaultVaule)

  const getThingRefValue = useCallback(() => {
    return thingRef.current
  }, [])

  const setThingRef = useCallback((value: T) => {
    thingRef.current = value
  }, [])

  return [getThingRefValue, setThingRef] as const
}
