import { forwardRef, useEffect, useState } from "react"
import { Input } from "#shared/components"

// Generated by ChatGPT 4.1 mini

/**
 * Props for the PriceInput component.
 *
 * @property {number} price - The current numeric price value.
 * @property {(value: number) => void} setPrice - Setter function to update the price.
 * @property {number} [defaultPrice] - Initial price value on mount (optional).
 * @property {boolean} [allowNegative=false] - Whether negative values are allowed.
 * @property {React.InputHTMLAttributes<HTMLInputElement>} [rest] - Other native input props.
 */
interface PriceInputProps extends React.InputHTMLAttributes<HTMLInputElement> {
  price: number
  setPrice: (value: number) => void
  defaultPrice?: number
  allowNegative?: boolean
}

/**
 * Normalize Persian digits (۰-۹) to Latin digits (0-9).
 *
 * @param {string} str - Input string possibly containing Persian digits.
 * @returns {string} - String with Persian digits replaced by Latin digits.
 */
function normalizePersianDigits(str: string): string {
  const persianDigits = "۰۱۲۳۴۵۶۷۸۹"
  return str.replace(/[۰-۹]/g, d => persianDigits.indexOf(d).toString())
}

/**
 * A controlled input component for entering prices.
 *
 * - Accepts both Persian and Latin digits.
 * - Allows formatting with commas after input loses focus.
 * - Prevents invalid characters from updating the price.
 * - Supports optional negative values.
 *
 * @param {PriceInputProps} props - Component props.
 * @param {React.Ref<HTMLInputElement>} ref - Ref forwarded to the input element.
 * @returns {JSX.Element} The rendered input component.
 *
 * @example
 * ```tsx
 * const [price, setPrice] = useState(1000);
 * <PriceInput price={price} setPrice={setPrice} allowNegative={false} />
 * ```
 */
const PriceInput = forwardRef<HTMLInputElement, PriceInputProps>(
  ({ price, setPrice, defaultPrice, allowNegative = false, ...rest }, ref) => {
    const [inputValue, setInputValue] = useState("")

    // Initialize price on mount if defaultPrice is provided
    useEffect(() => {
      if (defaultPrice !== undefined) {
        setPrice(defaultPrice)
      }
    }, [defaultPrice, setPrice])

    // Keep displayed input in sync with price prop
    useEffect(() => {
      setInputValue(price.toString())
    }, [price])

    /**
     * Handle user typing input.
     * Normalize Persian digits, block invalid chars, and update price state.
     */
    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
      let raw = e.target.value
      raw = normalizePersianDigits(raw).replaceAll(",", "")

      if (!allowNegative && raw.includes("-")) return

      // Allow empty or partial negative sign while typing
      if (/^-?\d*$/.test(raw)) {
        setInputValue(raw)
        const numeric = Number.parseInt(raw, 10)
        if (!Number.isNaN(numeric)) setPrice(numeric)
        else if (raw === "") setPrice(0)
      }
    }

    /**
     * Format input with commas on blur.
     */
    const handleBlur = () => {
      const numeric = Number.parseInt(inputValue, 10)
      if (!Number.isNaN(numeric)) {
        setInputValue(numeric.toLocaleString())
      } else {
        setInputValue("0")
        setPrice(0)
      }
    }

    return (
      <Input
        {...rest}
        type="text"
        dir="ltr"
        ref={ref}
        value={inputValue}
        onChange={handleChange}
        onBlur={handleBlur}
      />
    )
  },
)

export default PriceInput
